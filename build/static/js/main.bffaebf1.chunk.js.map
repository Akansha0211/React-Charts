{"version":3,"sources":["charts.js","App.js","reportWebVitals.js","index.js"],"names":["Charts","state","options","chart","background","toolbar","show","xaxis","categories","title","text","align","margin","style","fontSize","dataLabels","enabled","legend","position","horizontalAlign","floating","offsetY","offsetX","series","name","data","a","response","axios","get","console","log","arr","result","values","values1","map","item","push","views","time","this","setState","type","height","width","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAsGeA,E,4MAjGXC,MAAQ,CAEJC,QAAQ,CACJC,MAAM,CACFC,WAAY,UACZC,QAAQ,CACJC,MAAK,IAGbC,MAAM,CACFC,WAAW,IAEfC,MAAM,CACFC,KAAK,oBACLC,MAAM,SACNC,OAAQ,GACRC,MAAM,CACFC,SAAS,SAGjBC,WAAY,CACRC,SAAS,GAEXC,OAAQ,CACNC,SAAU,MACVC,gBAAiB,QACjBC,UAAU,EACVC,SAAU,GACVC,SAAU,IAGlBC,OAAQ,CACJ,CACEC,KAAM,QACNC,KAAM,IAER,CACID,KAAK,OACLC,KAAK,M,8FAMhB,oCAAAC,EAAA,6DACSC,EAAWC,IAAMC,IAAI,oDAD9B,SAEuBF,EAFvB,OAESF,EAFT,OAEiCA,KAC9BK,QAAQC,IAAIN,GAIPO,EAAMP,EAAKQ,OAEVC,EAAS,GACTC,EAAU,GACjBH,EAAII,KAAI,SAACC,GACJH,EAAOI,KAAKD,EAAKE,OACjBJ,EAAQG,KAAKD,EAAKG,MAClBV,QAAQC,IAAIG,GACZJ,QAAQC,IAAII,MAEjBM,KAAKC,SAAS,CACVnB,OAAO,CACN,CACGC,KAAK,QACLC,KAAOS,GAEX,CACIV,KAAK,OACLC,KAAMU,MAzBhB,iD,0EAmCD,WACI,OACI,8BACQ,cAAC,IAAD,CACAjC,QAASuC,KAAKxC,MAAMC,QACpBqB,OAAQkB,KAAKxC,MAAMsB,OACnBoB,KAAK,OACLC,OAAS,MACTC,MAAM,e,GAxFLC,aCONC,MARf,WACE,OACE,qBAAKC,UAAU,YAAf,SACC,cAAC,EAAD,OCMUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bffaebf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport axios from 'axios';\r\n\r\nclass Charts extends Component {\r\n    state = { \r\n      \r\n        options:{\r\n            chart:{\r\n                background: '#f4f4f4',\r\n                toolbar:{\r\n                    show:true\r\n                }\r\n            },\r\n            xaxis:{\r\n                categories:[]\r\n            },\r\n            title:{\r\n                text:\"Sample Line Chart\",\r\n                align:'center',\r\n                margin: 20,\r\n                style:{\r\n                    fontSize:'25px'\r\n                }\r\n            },\r\n            dataLabels: {\r\n                enabled: true,\r\n              },\r\n              legend: {\r\n                position: 'top',\r\n                horizontalAlign: 'right',\r\n                floating: true,\r\n                offsetY: -25,\r\n                offsetX: -5\r\n              },\r\n        },\r\n        series: [\r\n            {\r\n              name: \"views\",\r\n              data: []\r\n            },\r\n            {\r\n                name:'time',\r\n                data:[]\r\n            }\r\n          ]\r\n       \r\n     };\r\n\r\n     async componentDidMount(){\r\n        const response = axios.get(\"https://sokt.io/c/app/uia7y4nwWWzsu6yzwUVk/graph\");\r\n        const data = (await response).data;\r\n        console.log(data);\r\n        // this.setState({series:data.result}); //  has an array     \r\n        // console.log(this.state.series);\r\n\r\n       const arr = data.result;\r\n    //    console.log(arr);\r\n        const values = [];\r\n        const values1 = [];\r\n       arr.map((item)=>{\r\n            values.push(item.views)\r\n            values1.push(item.time)\r\n            console.log(values)\r\n            console.log(values1)\r\n       })\r\n       this.setState({\r\n           series:[\r\n            {\r\n               name:'views',\r\n               data : values\r\n           },\r\n           {\r\n               name:'time',\r\n               data: values1\r\n           }\r\n\r\n\r\n        ]\r\n       })\r\n       \r\n              \r\n     }\r\n     \r\n    render() { \r\n        return ( \r\n            <div>\r\n                    <Chart\r\n                    options={this.state.options}\r\n                    series={this.state.series}\r\n                    type=\"line\"\r\n                    height = \"450\"\r\n                    width=\"100%\"\r\n                />\r\n               \r\n            </div>\r\n            \r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default Charts;","import './App.css';\nimport Charts from './charts';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n     <Charts/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}